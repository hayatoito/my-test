# https://raw.githubusercontent.com/softprops/rust-bin-test/4afbc82754eb6f037defc5d020f67e56740e2dbd/.github/workflows/main.yml

name: build
on: [push]
jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            bin: my_test
            name: my_test-Linux-x86_64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: my_test.exe
            name: my_test-Windows-x86_64.zip
          - os: macOS-latest
            target: x86_64-apple-darwin
            bin: my_test
            name: my_test-Darwin-x86_64.tar.gz
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Rustup
        run: rustup target add ${{ matrix.target }}
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        run: cargo build --verbose --release --target ${{ matrix.target }}
      - name: Test
        run: cargo test --verbose --release --target ${{ matrix.target }}
      - name: Package
        shell: bash
        run: |
          strip target/${{ matrix.target }}/release/${{ matrix.bin }}
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]
          then
            7z a ../../../${{ matrix.name }} ${{ matrix.bin }}
          else
            tar czvf ../../../${{ matrix.name }} ${{ matrix.bin }}
          fi
          cd -
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: 'my_test*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



# on:
#   push:
#     # Sequence of patterns matched against refs/tags
#     tags:
#     - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# name: Upload Release Asset

# jobs:
#   build:
#     name: Upload Release Asset
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Build project
#         run: cargo build --release
#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1.0.0
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.ref }}
#           release_name: Release ${{ github.ref }}
#           draft: false
#           prerelease: false
#       - name: Upload Release Asset
#         id: upload-release-asset
#         uses: actions/upload-release-asset@v1.0.1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: ./target/release/my_test
#           asset_name: "my_test (ubuntu-latest)"
# #          asset_content_type: application/zip


# name: release

# on:
#   release:
#     types: [created]
# jobs:
#   generate:
#     name: Create release-artifacts
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: Build
#         run: cargo build --release
#       - name: Upload the artifacts
#         uses: skx/github-action-publish-binaries@master
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           args: 'target/release/my_test'
